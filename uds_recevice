import threading
import time
import random

# 模拟 CAN 数据帧
class CANFrame:
    def __init__(self, can_id, data):
        self.can_id = can_id  # 帧 ID
        self.data = data      # 数据内容

# 模拟 CAN 总线（发送和接收队列）
class CANBus:
    def __init__(self):
        self.tx_queue = []  # 发送队列
        self.rx_queue = []  # 接收队列
        self.lock = threading.Lock()

    def send(self, frame):
        with self.lock:
            self.rx_queue.append(frame)

    def receive(self):
        with self.lock:
            if self.rx_queue:
                return self.rx_queue.pop(0)
        return None

# 接收器（接收数据并发送流控帧）
class CANFDReceiver:
    def __init__(self, bus):
        self.bus = bus
        self.buffer = bytearray()       # 数据缓冲区
        self.expected_length = 0        # 预期总长度
        self.next_seq_num = 1           # 下一个连续帧序号
        self.last_receive_time = 0
        self.TIMEOUT = 1.0  # 超时时间（秒）

    def receive_frame(self, frame):
        can_id = frame.can_id
        data = frame.data

        current_time = time.time()

        # 超时检测
        if self.expected_length > 0 and (current_time - self.last_receive_time) > self.TIMEOUT:
            print("[超时] 拼帧超时，重置状态")
            self.reset()

        # 直接返回的业务帧（0x5D2 和 0x530）
        if can_id in [0x5D2, 0x530]:
            print(f"[业务帧] 接收到业务帧（ID {hex(can_id)}）：{data}")
            return

        # 判断是否是 UDS 数据帧（ID: 0x577）
        if can_id == 0x577:
            pci = data[0] >> 4  # PCI 高 4 位判断帧类型

            if pci == 0x0:  # 单帧（SF）
                length = data[0] & 0x0F
                payload = data[1:1 + length]
                print(f"[UDS] 单帧数据（ID {hex(can_id)}）：{payload}")

            elif pci == 0x1:  # 首帧（FF）
                # 提取总数据长度（12 位）
                self.expected_length = ((data[0] & 0x0F) << 8) + data[1]
                self.buffer = data[2:]  # 缓存首帧数据（前 6 字节）
                self.next_seq_num = 1
                self.last_receive_time = current_time
                print(f"[UDS] 首帧（ID {hex(can_id)}），总长度：{self.expected_length}")

                # 发送流控帧（FC）
                self.send_flow_control()

            elif pci == 0x2:  # 连续帧（CF）
                seq_num = data[0] & 0x0F  # 提取序号
                if seq_num != self.next_seq_num:
                    print("[UDS] 连续帧序号错误，丢弃数据")
                    self.reset()
                    return

                # 累积数据
                self.buffer += data[1:]
                self.next_seq_num = (self.next_seq_num + 1) % 16
                self.last_receive_time = current_time

                # 判断是否拼帧完成
                if len(self.buffer) >= self.expected_length:
                    print(f"[UDS] 拼帧完成：{self.buffer}")
                    self.process_complete_data(self.buffer)
                    self.reset()

    def send_flow_control(self):
        # 发送流控帧（FC）：ID 为 0x30000000
        fc_frame = CANFrame(0x30000000, bytes([0x30, 0x00, 0x00]))
        self.bus.send(fc_frame)
        print("[UDS] 发送流控帧（FC）：ID 0x30000000")

    def process_complete_data(self, data):
        print(f"[UDS] 处理完整数据：{data}")

    def reset(self):
        self.buffer = bytearray()
        self.expected_length = 0
        self.next_seq_num = 1

# 发送器（发送数据并等待流控帧）
class CANFDSender:
    def __init__(self, bus):
        self.bus = bus

    def send_large_data(self, data):
        total_length = len(data)
        if total_length <= 64:
            # 单帧发送
            sf_frame = CANFrame(0x577, bytes([0x00 | total_length]) + data)
            self.bus.send(sf_frame)
            print(f"[发送] 单帧发送：{data}")
        else:
            # 首帧（FF）
            first_frame_data = bytes([0x10 | ((total_length >> 8) & 0x0F), total_length & 0xFF]) + data[:6]
            self.bus.send(CANFrame(0x577, first_frame_data))
            print(f"[发送] 首帧（FF）发送，等待流控帧（FC）")

            # 等待流控帧（FC）
            while True:
                frame = self.bus.receive()
                if frame and frame.can_id == 0x30000000:
                    print("[发送] 接收到流控帧（FC），继续发送连续帧（CF）")
                    break
                time.sleep(0.01)

            # 发送连续帧（CF）
            remaining_data = data[6:]
            seq_num = 1
            while remaining_data:
                frame_size = min(7, len(remaining_data))
                cf_data = bytes([0x20 | seq_num]) + remaining_data[:frame_size]
                self.bus.send(CANFrame(0x577, cf_data))
                remaining_data = remaining_data[frame_size:]
                seq_num = (seq_num + 1) % 16
                time.sleep(0.01)  # 模拟发送间隔

# 主函数
def main():
    bus = CANBus()
    receiver = CANFDReceiver(bus)
    sender = CANFDSender(bus)

    # 启动接收线程
    threading.Thread(target=lambda: [receiver.receive_frame(bus.receive()) for _ in range(10000)], daemon=True).start()

    # 启动发送线程（发送大于64字节数据）
    threading.Thread(target=lambda: sender.send_large_data(bytes(random.randint(0, 255) for _ in range(100))), daemon=True).start()

    # 发送业务帧（0x5D2 和 0x530）
    threading.Thread(target=lambda: bus.send(CANFrame(0x5D2, b'Business Frame 5D2')), daemon=True).start()
    threading.Thread(target=lambda: bus.send(CANFrame(0x530, b'Business Frame 530')), daemon=True).start()

    # 保持主线程运行
    while True:
        time.sleep(1)

if __name__ == "__main__":
    main()

#uds_new
import threading
import time
import random

# 模拟 CAN 数据帧
class CANFrame:
    def __init__(self, can_id, data):
        self.can_id = can_id  # 帧 ID
        self.data = data      # 数据内容

# 模拟 CAN 总线
class CANBus:
    def __init__(self):
        self.data_pool = []   # 数据池用于模拟总线数据

    # 模拟发送数据（写入数据池）
    def send(self, frame):
        self.data_pool.append(frame)

    # 模拟接收数据（从数据池中读取）
    def receive(self):
        if self.data_pool:
            return self.data_pool.pop(0)
        return None

# 接收线程（实时接收处理）
class CANFDReceiver(threading.Thread):
    def __init__(self, bus):
        super().__init__()
        self.bus = bus
        self.buffer = bytearray()       # 数据缓冲区
        self.expected_length = 0        # 预期总长度
        self.next_seq_num = 1           # 下一个连续帧序号
        self.last_receive_time = 0      # 上次接收时间
        self.TIMEOUT = 1.0              # 超时时间（秒）
        self.running = True             # 控制线程运行

    def run(self):
        while self.running:
            frame = self.bus.receive()
            if frame:
                self.process_frame(frame)

            # 超时检测
            if self.expected_length > 0 and (time.time() - self.last_receive_time) > self.TIMEOUT:
                print("[超时] 拼帧超时，重置状态")
                self.reset()

            time.sleep(0.01)  # 短暂休眠，避免 CPU 占用过高

    def process_frame(self, frame):
        can_id = frame.can_id
        data = frame.data
        current_time = time.time()

        # 直接返回的业务帧（0x5D2 和 0x530）
        if can_id in [0x5D2, 0x530]:
            print(f"[业务帧] 接收到业务帧（ID {hex(can_id)}）：{data}")
            return

        # UDS 数据帧（ID: 0x577）
        if can_id == 0x577:
            pci = data[0] >> 4  # PCI 高 4 位判断帧类型

            if pci == 0x0:  # 单帧（SF）
                length = data[0] & 0x0F
                payload = data[1:1 + length]
                print(f"[UDS] 单帧数据（ID {hex(can_id)}）：{payload}")

            elif pci == 0x1:  # 首帧（FF）
                # 提取总数据长度（12 位）
                self.expected_length = ((data[0] & 0x0F) << 8) + data[1]
                self.buffer = data[2:]  # 缓存首帧数据（前 6 字节）
                self.next_seq_num = 1
                self.last_receive_time = current_time
                print(f"[UDS] 首帧（ID {hex(can_id)}），总长度：{self.expected_length}")

                # 发送流控帧（FC）
                self.send_flow_control()

            elif pci == 0x2:  # 连续帧（CF）
                seq_num = data[0] & 0x0F  # 提取序号
                if seq_num != self.next_seq_num:
                    print("[UDS] 连续帧序号错误，丢弃数据")
                    self.reset()
                    return

                # 累积数据
                self.buffer += data[1:]
                self.next_seq_num = (self.next_seq_num + 1) % 16
                self.last_receive_time = current_time

                # 判断是否拼帧完成
                if len(self.buffer) >= self.expected_length:
                    print(f"[UDS] 拼帧完成：{self.buffer}")
                    self.process_complete_data(self.buffer)
                    self.reset()

    def send_flow_control(self):
        # 发送流控帧（FC）：ID 为 0x30000000
        fc_frame = CANFrame(0x30000000, bytes([0x30, 0x00, 0x00]))
        self.bus.send(fc_frame)
        print("[UDS] 发送流控帧（FC）：ID 0x30000000")

    def process_complete_data(self, data):
        print(f"[UDS] 处理完整数据：{data}")

    def reset(self):
        self.buffer = bytearray()
        self.expected_length = 0
        self.next_seq_num = 1

# 持续发送数据的线程
class CANFDSender(threading.Thread):
    def __init__(self, bus):
        super().__init__()
        self.bus = bus
        self.running = True

    def run(self):
        while self.running:
            # 随机发送业务帧和 UDS 帧
            choice = random.choice(['business', 'uds'])
            if choice == 'business':
                # 发送业务帧（0x5D2 或 0x530）
                frame_id = random.choice([0x5D2, 0x530])
                data = bytes(random.randint(0, 255) for _ in range(8))
                self.bus.send(CANFrame(frame_id, data))
                print(f"[发送] 业务帧（ID {hex(frame_id)}）：{data}")
            else:
                # 发送 UDS 长数据帧（0x577）
                self.send_large_uds_data(bytes(random.randint(0, 255) for _ in range(100)))

            time.sleep(0.5)

    def send_large_uds_data(self, data):
        total_length = len(data)
        # 发送首帧（FF）
        first_frame_data = bytes([0x10 | ((total_length >> 8) & 0x0F), total_length & 0xFF]) + data[:6]
        self.bus.send(CANFrame(0x577, first_frame_data))
        print(f"[发送] 首帧（FF）发送")

        # 模拟流控帧等待
        time.sleep(0.1)

        # 发送连续帧（CF）
        remaining_data = data[6:]
        seq_num = 1
        while remaining_data:
            frame_size = min(7, len(remaining_data))
            cf_data = bytes([0x20 | seq_num]) + remaining_data[:frame_size]
            self.bus.send(CANFrame(0x577, cf_data))
            remaining_data = remaining_data[frame_size:]
            seq_num = (seq_num + 1) % 16
            time.sleep(0.01)

# 主程序
def main():
    bus = CANBus()
    receiver = CANFDReceiver(bus)
    sender = CANFDSender(bus)

    receiver.start()  # 启动接收线程
    sender.start()    # 启动发送线程

    while True:
        time.sleep(1)

if __name__ == "__main__":
    main()

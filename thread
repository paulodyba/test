确实，allow_printing_dict 作为共享内存中的字典，在多线程环境中需要考虑 并发访问 的问题。如果多个线程同时访问或修改字典中的某个值，可能会导致 竞争条件（race condition），从而引发不一致的行为。

在这种情况下，我们可以使用 线程锁（Lock）来确保在某一时刻只有一个线程能够修改 allow_printing_dict，防止出现竞争问题。

如何使用线程锁防止竞争：
在修改 allow_printing_dict 时，使用一个 Lock 来确保只有一个线程能同时修改字典。
使用 Lock 时，通过 acquire() 获取锁，修改完数据后通过 release() 释放锁。
对于读取操作，最好也用锁来同步，尤其是在字典值可能被多个线程同时读取的情况下。
代码修改：
添加一个 Lock 来保护对 allow_printing_dict 的访问。
在修改或读取 allow_printing_dict 时，都要先获取锁。

出现卡死问题的原因是在重新启动设备时，已经停止的线程无法通过thread.start()重新启动。在 Python 中，一旦一个线程被停止，它不能被重新启动。你需要为每个设备创建一个新的线程实例来代替重新启动已经停止的线程。

问题分析：
thread.start() 只能调用一次：当一个线程被停止后，它就进入了“终止”状态。再次调用start()会引发错误，导致程序“卡死”。
重新启动的机制：必须为每个设备创建一个新的线程实例，并正确地管理线程状态（创建新线程实例而不是复用已经停止的线程实例）。
解决方案：
创建新的线程：每次重新启动设备时，都需要创建一个新的WorkerThread实例，而不是调用已经停止的线程的start()方法。
更新线程和停止事件的引用：在重新启动时，我们需要确保为设备重新分配新的线程和停止事件。


import sys
import time
import threading
from multiprocessing import Manager
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel


class WorkerThread(threading.Thread):
    def __init__(self, dev_id, shared_value, stop_event):
        super().__init__()
        self.dev_id = dev_id  # 唯一标识
        self.shared_value = shared_value  # 共享内存中的值，用来判断激活哪个线程
        self.stop_event = stop_event  # 停止线程的事件
        self._send_data = False
        self.six_flag = {}

    def run(self):
        while not self.stop_event.is_set():
            # 检查共享值，决定是否激活当前线程
            if self.shared_value.value == self.dev_id:

                if not self._send_data:
                    # self._send_data = True
                    print(f"设备 {self.dev_id} 已激活，开始发送数据...")
            # else:
            #     # 线程处于非激活状态时，不做任何操作
            #     if self._send_data:
            #         self._send_data = False
            #         print(f"设备 {self.dev_id} 停止发送数据")
            print(f"设备 {self.dev_id} 正在运行。。。")
            time.sleep(1)  # 每秒检查一次

    def stop(self):
        """ 停止线程运行 """
        self.stop_event.set()  # 设置事件标志为已停止
        print(f"设备 {self.dev_id} 已停止")


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("线程控制示例")
        self.setGeometry(100, 100, 400, 300)

        # 使用 Manager 创建共享内存
        self.manager = Manager()
        self.shared_value = self.manager.Value('i', 0)  # 初始化共享内存，值为 0，表示第一个线程被激活
        self.shareda = 0

        self.threads = []
        self.stop_events = []  # 每个线程的停止事件
        self.thread_count = 6  # 需要创建6个线程
        self.status_label = QLabel("线程状态：", self)

        # 创建按钮
        self.start_threads_btn = QPushButton("启动所有线程", self)
        self.change_value_btn = QPushButton("改变共享值", self)

        # 创建六个停止按钮
        self.stop_buttons = []
        for i in range(self.thread_count):
            stop_button = QPushButton(f"停止设备 {i + 1}", self)
            stop_button.clicked.connect(self.create_stop_function(i))
            self.stop_buttons.append(stop_button)

        # 设置布局
        layout = QVBoxLayout()
        layout.addWidget(self.status_label)
        layout.addWidget(self.start_threads_btn)
        layout.addWidget(self.change_value_btn)
        for stop_button in self.stop_buttons:
            layout.addWidget(stop_button)

        self.setLayout(layout)

        # 连接信号与槽（信号槽分开管理）
        self.connect_signals()

        # 定时器（每秒更新共享值，模拟变化）
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.monitor_shared_value)
        # self.timer.start(1000)  # 每秒更新一次共享值

    def connect_signals(self):
        """ 连接信号和槽 """
        self.start_threads_btn.clicked.connect(self.start_threads)
        self.change_value_btn.clicked.connect(self.change_shared_value)

    def start_threads(self):
        """ 启动所有线程 """
        for dev_id in range(self.thread_count):
            stop_event = threading.Event()  # 每个线程都有一个停止事件
            self.stop_events.append(stop_event)
            thread = WorkerThread(dev_id, self.shared_value, stop_event)
            thread.start()
            self.threads.append(thread)
        self.update_status(f"已启动 {self.thread_count} 个线程")

    def create_stop_function(self, dev_id):
        """ 创建停止按钮的槽函数 """
        def stop_thread():
            # 调用线程的 stop 方法
            self.threads[dev_id].stop()
            self.update_status(f"设备 {dev_id + 1} 已停止")
        return stop_thread

    def monitor_shared_value(self):
        """ 定时监测共享内存中的值，并根据值控制线程激活 """
        print(f"当前共享值: {self.shared_value.value}")
        # 打印当前状态
        for dev_id in range(self.thread_count):
            if self.shared_value.value == dev_id:
                print(f"设备 {dev_id + 1} 被激活")
            else:
                print(f"设备 {dev_id + 1} 继续运行")

    def change_shared_value(self):
        """ 改变共享内存中的值 """
        # 循环改变共享值，使其在 0 到 5 之间
        if self.shared_value.value < 5:
            self.shared_value.value += 1
        else:
            self.shared_value.value = 0
        self.update_status(f"共享值已更新为 {self.shared_value.value}")

    def update_status(self, message):
        """ 更新状态标签 """
        self.status_label.setText(message)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())



import sys
import time
import threading
from multiprocessing import Manager
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel


class WorkerThread(threading.Thread):
    def __init__(self, dev_id, shared_value, stop_event, allow_printing_dict):
        super().__init__()
        self.dev_id = dev_id  # 唯一标识
        self.shared_value = shared_value  # 共享内存中的值，用来判断激活哪个线程
        self.stop_event = stop_event  # 停止线程的事件
        self.allow_printing_dict = allow_printing_dict  # 控制打印的共享字典
        self.activated = False  # 记录线程是否已经激活

    def run(self):
        while not self.stop_event.is_set():
            if self.shared_value.value == self.dev_id and not self.activated:
                # 一旦激活后就开始发送数据，并且设置激活标志
                self.activated = True
                if self.allow_printing_dict[self.dev_id]:
                    print(f"设备 {self.dev_id} 已激活，开始发送数据...")

            # 如果已经激活，始终发送数据
            if self.activated:
                if self.allow_printing_dict[self.dev_id]:
                    print(f"设备 {self.dev_id} 正在持续发送数据...")
            else:
                if self.allow_printing_dict[self.dev_id]:
                    print(f"设备 {self.dev_id} 正在运行。。。")

            time.sleep(1)  # 每秒检查一次

    def stop(self):
        """ 停止线程运行 """
        self.stop_event.set()  # 设置事件标志为已停止
        if self.allow_printing_dict[self.dev_id]:
            print(f"设备 {self.dev_id} 已停止")


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("线程控制示例")
        self.setGeometry(100, 100, 400, 300)

        # 使用 Manager 创建共享内存
        self.manager = Manager()
        self.shared_value = self.manager.Value('i', 0)  # 初始化共享内存，值为 0，表示第一个线程被激活
        self.allow_printing_dict = self.manager.dict()  # 使用字典来管理每个设备的打印状态

        self.thread_count = 6  # 需要创建6个线程
        self.threads = []
        self.stop_events = []  # 每个线程的停止事件
        self.status_label = QLabel("线程状态：", self)

        # 创建按钮
        self.start_threads_btn = QPushButton("启动所有线程", self)
        self.change_value_btn = QPushButton("改变共享值", self)

        # 创建六个停止按钮
        self.stop_buttons = []
        for i in range(self.thread_count):
            stop_button = QPushButton(f"停止设备 {i + 1}", self)
            stop_button.clicked.connect(self.create_stop_function(i))
            self.stop_buttons.append(stop_button)

        # 创建六个控制打印按钮
        self.toggle_printing_buttons = []
        for i in range(self.thread_count):
            toggle_button = QPushButton(f"切换设备 {i + 1} 打印", self)
            toggle_button.clicked.connect(self.create_toggle_printing_function(i))
            self.toggle_printing_buttons.append(toggle_button)

        # 设置布局
        layout = QVBoxLayout()
        layout.addWidget(self.status_label)
        layout.addWidget(self.start_threads_btn)
        layout.addWidget(self.change_value_btn)
        for stop_button in self.stop_buttons:
            layout.addWidget(stop_button)

        for toggle_button in self.toggle_printing_buttons:
            layout.addWidget(toggle_button)

        self.setLayout(layout)

        # 初始化所有设备的打印状态为 True（允许打印）
        for dev_id in range(self.thread_count):
            self.allow_printing_dict[dev_id] = True

        # 连接信号与槽（信号槽分开管理）
        self.connect_signals()

    def connect_signals(self):
        """ 连接信号和槽 """
        self.start_threads_btn.clicked.connect(self.start_threads)
        self.change_value_btn.clicked.connect(self.change_shared_value)

    def start_threads(self):
        """ 启动所有线程 """
        for dev_id in range(self.thread_count):
            stop_event = threading.Event()  # 每个线程都有一个停止事件
            self.stop_events.append(stop_event)
            thread = WorkerThread(dev_id, self.shared_value, stop_event, self.allow_printing_dict)
            thread.start()
            self.threads.append(thread)
        self.update_status(f"已启动 {self.thread_count} 个线程")

    def create_stop_function(self, dev_id):
        """ 创建停止 按钮的槽函数 """
        def stop_thread():
            # 调用线程的 stop 方法
            self.threads[dev_id].stop()
            self.update_status(f"设备 {dev_id + 1} 已停止")
        return stop_thread

    def create_toggle_printing_function(self, dev_id):
        """ 创建切换打印状态的槽函数 """
        def toggle_printing():
            # 直接修改共享内存中的打印控制值
            self.allow_printing_dict[dev_id] = not self.allow_printing_dict[dev_id]
            state = "开启" if self.allow_printing_dict[dev_id] else "关闭"
            self.update_status(f"设备 {dev_id + 1} 打印功能已{state}")
        return toggle_printing

    def change_shared_value(self):
        """ 改变共享内存中的值 """
        if self.shared_value.value < 5:
            self.shared_value.value += 1
        else:
            self.shared_value.value = 0
        self.update_status(f"共享值已更新为 {self.shared_value.value}")

    def update_status(self, message):
        """ 更新状态标签 """
        self.status_label.setText(message)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())


import sys
import time
import threading
from multiprocessing import Manager
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel


class WorkerThread(threading.Thread):
    def __init__(self, dev_id, shared_value, stop_event, allow_printing_dict, lock):
        super().__init__()
        self.dev_id = dev_id  # 唯一标识
        self.shared_value = shared_value  # 共享内存中的值，用来判断激活哪个线程
        self.stop_event = stop_event  # 停止线程的事件
        self.allow_printing_dict = allow_printing_dict  # 控制打印的共享字典
        self.lock = lock  # 线程锁
        self.activated = False  # 记录线程是否已经激活

    def run(self):
        while not self.stop_event.is_set():
            if self.shared_value.value == self.dev_id and not self.activated:
                # 一旦激活后就开始发送数据，并且设置激活标志
                self.activated = True
                if self.is_print_allowed():
                    print(f"设备 {self.dev_id} 已激活，开始发送数据...")

            # 如果已经激活，始终发送数据
            if self.activated:
                if self.is_print_allowed():
                    print(f"设备 {self.dev_id} 正在持续发送数据...")
            else:
                if self.is_print_allowed():
                    print(f"设备 {self.dev_id} 正在运行。。。")

            time.sleep(1)  # 每秒检查一次

    def stop(self):
        """ 停止线程运行 """
        self.stop_event.set()  # 设置事件标志为已停止
        if self.is_print_allowed():
            print(f"设备 {self.dev_id} 已停止")

    def is_print_allowed(self):
        """ 检查是否允许打印 """
        with self.lock:  # 获取锁
            return self.allow_printing_dict.get(self.dev_id, False)


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("线程控制示例")
        self.setGeometry(100, 100, 400, 300)

        # 使用 Manager 创建共享内存
        self.manager = Manager()
        self.shared_value = self.manager.Value('i', 0)  # 初始化共享内存，值为 0，表示第一个线程被激活
        self.allow_printing_dict = self.manager.dict()  # 使用字典来管理每个设备的打印状态
        self.lock = threading.Lock()  # 创建一个锁对象

        self.thread_count = 6  # 需要创建6个线程
        self.threads = []
        self.stop_events = []  # 每个线程的停止事件
        self.status_label = QLabel("线程状态：", self)

        # 创建按钮
        self.start_threads_btn = QPushButton("启动所有线程", self)
        self.change_value_btn = QPushButton("改变共享值", self)

        # 创建六个停止按钮
        self.stop_buttons = []
        for i in range(self.thread_count):
            stop_button = QPushButton(f"停止设备 {i + 1}", self)
            stop_button.clicked.connect(self.create_stop_function(i))
            self.stop_buttons.append(stop_button)

        # 创建六个控制打印按钮
        self.toggle_printing_buttons = []
        for i in range(self.thread_count):
            toggle_button = QPushButton(f"切换设备 {i + 1} 打印", self)
            toggle_button.clicked.connect(self.create_toggle_printing_function(i))
            self.toggle_printing_buttons.append(toggle_button)

        # 设置布局
        layout = QVBoxLayout()
        layout.addWidget(self.status_label)
        layout.addWidget(self.start_threads_btn)
        layout.addWidget(self.change_value_btn)
        for stop_button in self.stop_buttons:
            layout.addWidget(stop_button)

        for toggle_button in self.toggle_printing_buttons:
            layout.addWidget(toggle_button)

        self.setLayout(layout)

        # 初始化所有设备的打印状态为 True（允许打印）
        for dev_id in range(self.thread_count):
            self.allow_printing_dict[dev_id] = True

        # 连接信号与槽（信号槽分开管理）
        self.connect_signals()

    def connect_signals(self):
        """ 连接信号和槽 """
        self.start_threads_btn.clicked.connect(self.start_threads)
        self.change_value_btn.clicked.connect(self.change_shared_value)

    def start_threads(self):
        """ 启动所有线程 """
        for dev_id in range(self.thread_count):
            stop_event = threading.Event()  # 每个线程都有一个停止事件
            self.stop_events.append(stop_event)
            thread = WorkerThread(dev_id, self.shared_value, stop_event, self.allow_printing_dict, self.lock)
            thread.start()
            self.threads.append(thread)
        self.update_status(f"已启动 {self.thread_count} 个线程")

    def create_stop_function(self, dev_id):
        """ 创建停止 按钮的槽函数 """
        def stop_thread():
            # 调用线程的 stop 方法
            self.threads[dev_id].stop()
            self.update_status(f"设备 {dev_id + 1} 已停止")
        return stop_thread

    def create_toggle_printing_function(self, dev_id):
        """ 创建切换打印状态的槽函数 """
        def toggle_printing():
            # 使用锁修改共享内存中的打印控制值
            with self.lock:  # 获取锁
                self.allow_printing_dict[dev_id] = not self.allow_printing_dict[dev_id]
            state = "开启" if self.allow_printing_dict[dev_id] else "关闭"
            self.update_status(f"设备 {dev_id + 1} 打印功能已{state}")
        return toggle_printing

    def change_shared_value(self):
        """ 改变共享内存中的值 """
        if self.shared_value.value < 5:
            self.shared_value.value += 1
        else:
            self.shared_value.value = 0
        self.update_status(f"共享值已更新为 {self.shared_value.value}")

    def update_status(self, message):
        """ 更新状态标签 """
        self.status_label.setText(message)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

